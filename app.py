import os
import gradio as gr
from crewai import Task, Agent, LLM
from youtube import pesquisar_videos_youtube
import time  # Para simular a progress√£o

GROQ_API_KEY_01 = os.getenv("GROQ_API_KEY_01")
groqllm = LLM(
    model="groq/llama-3.3-70b-versatile",
    api_key=GROQ_API_KEY_01
)
GROQ_API_KEY_02 = os.getenv("GROQ_API_KEY_02")
groqllm2 = LLM(
    model="groq/llama-3.3-70b-versatile",
    api_key=GROQ_API_KEY_02
)

def processar_topicos(topicos_str):
    """ Converte uma string de t√≥picos separada por v√≠rgulas em uma lista tratada. """
    return [t.strip() for t in topicos_str.split(',') if t.strip()]

def executar_equipe_interface(disciplina, assunto, topicos_str, horas, dias):
    
    topicos = processar_topicos(topicos_str)

    solicitacao = f"Disciplina: {disciplina}\nAssunto: {assunto}\nT√≥picos: {topicos}\n"

    yield "Buscando v√≠deos no YouTube...", gr.update(value=10)
    entradaYoutube = pesquisar_videos_youtube(solicitacao)

    # Motiva√ß√£o
    yield "Criando mensagem motivacional...", gr.update(value=30)
    agentMotivador = Agent(
        role='Motivador',
        goal='Escrever uma mensagem motivacional para o estudante.',
        backstory='Voc√™ √© um coach motivacional com experi√™ncia em ajudar estudantes a manterem o foco.',
        llm=groqllm,
        verbose=True
    )
    taskMotivador = Task(
        description = (
            "Escreva uma mensagem motivacional para o estudante, formatada em Markdown.\n\n"
            "A mensagem deve conter:\n"
            "## Mensagem Motivacional üéØ\n\n"
            "- Um par√°grafo inicial incentivando o estudante a seguir seus estudos.\n"
            "- Frases inspiradoras para manter o foco e a disciplina.\n"
            "- Um fechamento encorajador, refor√ßando a import√¢ncia do esfor√ßo e da dedica√ß√£o.\n\n"
            "O texto deve ser positivo, motivador e adequado para estudantes de ensino m√©dio."
        ),
        agent=agentMotivador,
        expected_output='Mensagem motivacional em markdown.'
    )
    saidaMotivador = agentMotivador.execute_task(taskMotivador)

    # Guia de Estudos
    yield "Gerando guia de estudos...", gr.update(value=50)
    agentGuia = Agent(
        role="Especialista em Guia de Estudos",
        goal="Criar um guia de estudos estruturado, explicativo e did√°tico sobre um determinado assunto.",
        backstory="Voc√™ √© um especialista em educa√ß√£o, com experi√™ncia na cria√ß√£o de guias de estudo detalhados.",
        llm=groqllm,
        verbose=True
    )
    taskGuia = Task(
        description = (
            f"Crie um Guia de Estudos para {disciplina}, abordando {assunto} e os t√≥picos {topicos}. "
            "O guia deve seguir a seguinte estrutura e formata√ß√£o:\n\n"
            "## Guia de Estudos: {disciplina}\n\n"
            "### Introdu√ß√£o\n"
            "- Texto introdut√≥rio justificado sobre o tema, destacando sua import√¢ncia e contexto.\n\n"
            "### Conceitos Fundamentais\n"
            "- Explica√ß√£o detalhada dos principais conceitos abordados, com exemplos pr√°ticos.\n"
            "- Utilize listas n√£o ordenadas para estruturar os conceitos.\n\n"
            "### Aplica√ß√µes Pr√°ticas\n"
            "- Explique como o tema se aplica no mundo real.\n"
            "- Utilize exemplos concretos e listas para organizar as aplica√ß√µes.\n\n"
            "### T√©cnicas de Aprendizado e Dificuldades Comuns\n"
            "- Apresente m√©todos eficazes para aprender o tema.\n"
            "- Liste dificuldades comuns dos alunos e estrat√©gias para super√°-las.\n\n"
            "### Indica√ß√£o de Materiais Gratuitos\n"
            "- Forne√ßa sugest√µes de livros, v√≠deos e artigos gratuitos sobre o tema.\n"
            "- Apresente os materiais em formato de lista com t√≠tulos e links quando poss√≠vel.\n\n"
            "O conte√∫do deve ser did√°tico, acess√≠vel para alunos do ensino m√©dio e utilizar texto justificado sempre que poss√≠vel."
        ),
        agent=agentGuia,
        expected_output='Guia de estudos em markdown'
    )
    saidaGuia = agentGuia.execute_task(taskGuia)

    # Plano de Estudos
    yield "Criando plano de estudos...", gr.update(value=70)
    agentPlano = Agent(
        role="Especialista em Plano de Estudos",
        goal="Criar um plano de estudos eficiente para que o aluno aprenda de maneira organizada.",
        backstory="Voc√™ √© um planejador educacional especialista em cronogramas de estudo eficientes.",
        llm=groqllm2,
        verbose=True
    )
    taskPlano = Task(
        description = (
            f"Crie um Plano de Estudos para {disciplina}, cobrindo {assunto} e os t√≥picos {topicos}. "
            f"O aluno tem {horas} horas por dia e {dias} dias para estudar.\n\n"
            "O plano deve seguir esta estrutura e formata√ß√£o:\n\n"
            "## Plano de Estudos: {disciplina}\n\n"
            "### Introdu√ß√£o\n"
            "- Apresenta√ß√£o do objetivo do plano de estudos.\n"
            "- Import√¢ncia da organiza√ß√£o para otimizar o aprendizado.\n\n"
            "### Distribui√ß√£o Equilibrada dos T√≥picos\n"
            "- Divis√£o dos conte√∫dos de forma proporcional ao tempo dispon√≠vel.\n"
            "- Sugerir uma agenda di√°ria/semanal equilibrada.\n\n"
            "### T√©cnicas Ativas de Aprendizado\n"
            "- Explica√ß√£o de estrat√©gias eficazes para o estudo, incluindo:\n"
            "  - Resumos\n"
            "  - Flashcards\n"
            "  - Mapas mentais\n"
            "  - Resolu√ß√£o de exerc√≠cios\n\n"
            "### Revis√µes Programadas\n"
            "- Definir per√≠odos estrat√©gicos para revis√£o de conte√∫dos.\n"
            "- Sugest√£o de t√©cnicas como repeti√ß√£o espa√ßada e autoavalia√ß√£o.\n\n"
            "### Monitoramento do Progresso\n"
            "- M√©todos para acompanhar a evolu√ß√£o do estudo.\n"
            "- Uso de checklists ou aplicativos para organiza√ß√£o.\n\n"
            "### Sugest√µes para Pausas e Evitar Sobrecarga Mental\n"
            "- Import√¢ncia das pausas regulares para manter a produtividade.\n"
            "- Sugest√£o de t√©cnicas como a T√©cnica Pomodoro.\n"
            "- Dicas para manter o bem-estar mental durante os estudos.\n\n"
            "O plano deve ser did√°tico, bem estruturado e adapt√°vel para alunos do ensino m√©dio."
        ),
        agent=agentPlano,
        expected_output='Plano de estudos estruturado em markdown'
    )
    saidaPlano = agentPlano.execute_task(taskPlano)

    # Curadoria de V√≠deos
    yield "Organizando v√≠deos do YouTube...", gr.update(value=90)
    agentYoutube = Agent(
        role='Especialista em Curadoria de V√≠deos Educacionais',
        goal='Organizar e formatar v√≠deos educacionais encontrados no YouTube para aprendizado eficiente.',
        backstory='Voc√™ √© um especialista em curadoria de materiais educacionais, com experi√™ncia na sele√ß√£o de v√≠deos para ensino.',
        llm=groqllm2,
        verbose=True
    )
    taskYoutube = Task(
        description = (
            f"Lista do Youtube: {entradaYoutube} "
            "Voc√™ receber√° uma lista de v√≠deos extra√≠da da API do YouTube. Sua tarefa √© classificar e organizar os v√≠deos "
            "por categorias, formatando-os em Markdown. As categorias devem ser baseadas no t√≠tulo do v√≠deo.\n\n"
            f"## V√≠deos sobre {assunto}\n\n"
            "### Formato de sa√≠da\n"
            "- Para cada v√≠deo, a sa√≠da deve seguir o formato abaixo:\n"
            "  **[T√≠tulo](URL)**\n\n  _Descri√ß√£o_\n\n"
            "- Se um v√≠deo n√£o tiver descri√ß√£o, substituir por '(Sem descri√ß√£o dispon√≠vel)'.\n"
            "- Se houver mais de um v√≠deo, repetir a estrutura para cada um.\n"
            "- Certifique-se de que a formata√ß√£o Markdown esteja correta e bem organizada."
            "Caso um dos videos seja esse: https://www.youtube.com/watch?v=dQw4w9WgXcQ"
            "a saida dever√° ser:"
            "- Caso a lista de v√≠deos n√£o contenha resultados relevantes,"
            "pode haver a inser√ß√£o autom√°tica de um v√≠deo gen√©rico (exemplo:"
            "\url{https://www.youtube.com/watch?v=dQw4w9WgXcQ}), utilizado"
            "como marcador de aus√™ncia de v√≠deos sobre o tema buscado."
           " Nesses casos, a sa√≠da deve ser:"
            "##N√£o foram encontrados v√≠deos sobre o assunto"
        ),
        agent=agentYoutube,
        expected_output="Lista de v√≠deos organizados em Markdown."
    )
    saidaYoutube = agentYoutube.execute_task(taskYoutube)

    yield "Processo conclu√≠do!", gr.update(value=100)

    saidaCompleta = f"""
# üéØ Motiva√ß√£o
{saidaMotivador}

---

# üìñ Guia de Estudos
{saidaGuia}

---

# üìÖ Plano de Estudos
{saidaPlano}

---

# üé• V√≠deos Educacionais
{saidaYoutube}
"""

    yield saidaCompleta, gr.update(value=100)

# Interface Gradio
with gr.Blocks() as demo:
    gr.Markdown("# üìö Gerador de Material de Estudos")
    with gr.Row():
        with gr.Column():
            disciplina = gr.Textbox(label="Disciplina", value="Matem√°tica")
            assunto = gr.Textbox(label="Assunto", value="Fun√ß√µes")
            topicos_str = gr.Textbox(label="T√≥picos", value="Fun√ß√£o quadr√°tica, Fun√ß√£o exponencial, Fun√ß√£o logar√≠tmica")
            horas = gr.Textbox(label="Tempo di√°rio", value="2 horas")
            dias = gr.Textbox(label="Quantos dias", value="5 dias")
            gerar_button = gr.Button("Gerar Material")
            progress = gr.Slider(minimum=0, maximum=100, step=1, value=0, label="Progresso", interactive=False)
        with gr.Column():
            resultado = gr.Markdown(label="Material Completo (Markdown)")

    gerar_button.click(fn=executar_equipe_interface,
                       inputs=[disciplina, assunto, topicos_str, horas, dias],
                       outputs=[resultado, progress])

demo.launch()
